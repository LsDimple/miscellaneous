double binomial_slow(int N, int k, double p)
{
    if (N == 0 && k == 0) return 1.0;
    if (N < 0 || k < 0) return 0.0;
    else return (1.0-p) * binomial_slow(N-1, k, p) + p * binomial_slow(N-1, k-1, p);
}

double val[128][128];
double binomial_fast(int N, int k, double p)
{
    if (val[N][k] > 0) return val[N][k];
    if ((N == 0) && (k == 0)) return 1.0;
    if (N < 0 || k < 0) return 0.0;
    double res = (1.0 - p) * binomial(N-1, k, p) + p * binomial(N-1, k-1, p);
    val[N][k] = res;
    
    return res;
}

double binomial(int N, int k, double p)
{
    double b[N+1][k+1];
   
    // base cases
    for (int i = 0; i <= N; i++)
        b[i][0] = pow(1.0 - p, i);
    b[0][0] = 1.0;

    // recursive formula
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= k; j++) {
            b[i][j] = p * b[i-1][j-1] + (1.0 - p) *b[i-1][j];
        }
    }
    return b[N][k];
}
